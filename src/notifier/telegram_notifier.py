"""
–†–µ–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ Telegram.
"""

import asyncio
import logging
import time
from typing import Dict, Any, Optional, List, Union, Tuple
import aiohttp
from urllib.parse import urljoin

from src.notifier.base_notifier import BaseNotifier
from src.utils import get_logger, log_async_execution_time
from config.settings import Settings

# –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
settings = Settings()

# –ë–∞–∑–æ–≤—ã–π URL –¥–ª—è Telegram Bot API
TELEGRAM_API_URL = "https://api.telegram.org/bot"

# –≠–º–æ–¥–∑–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
EMOJI_MAP = {
    "info": "‚ÑπÔ∏è",
    "success": "‚úÖ",
    "warning": "‚ö†Ô∏è",
    "error": "‚ùå",
    "critical": "üö®",
    "trade": "üí∞",
    "arbitrage": "üíπ",
    "system": "ü§ñ",
    "buy": "üü¢",
    "sell": "üî¥",
    "executed": "‚úÖ",
    "failed": "‚ùå",
    "pending": "‚è≥",
    "running": "üü¢",
    "stopped": "üî¥",
}


class TelegramNotifier(BaseNotifier):
    """
    –ö–ª–∞—Å—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ Telegram.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Bot API –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π —á–∞—Ç.
    """
    
    def __init__(self, token: Optional[str] = None, chat_id: Optional[str] = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç Telegram –Ω–æ—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä.
        
        Args:
            token: –¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫)
            chat_id: ID —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫)
        """
        self.logger = get_logger(__name__)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏ chat_id –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–ª–∏ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        self.token = token or settings.TELEGRAM_BOT_TOKEN
        self.chat_id = chat_id or settings.TELEGRAM_CHAT_ID
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        if not self.token:
            self.logger.error("–¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω")
            raise ValueError("–¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω")
        
        if not self.chat_id:
            self.logger.error("ID —á–∞—Ç–∞ Telegram –Ω–µ —É–∫–∞–∑–∞–Ω")
            raise ValueError("ID —á–∞—Ç–∞ Telegram –Ω–µ —É–∫–∞–∑–∞–Ω")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–π URL API –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞
        self.api_url = f"{TELEGRAM_API_URL}{self.token}/"
        
        # –õ–∏–º–∏—Ç—ã –∏ —Å—á–µ—Ç—á–∏–∫–∏ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è rate limit
        self.max_messages_per_second = 30  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ Telegram API
        self.message_queue = asyncio.Queue()
        self.message_count = 0
        self.last_reset_time = time.time()
        
        # –§–ª–∞–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—á–µ—Ä–µ–¥–∏
        self.is_queue_processor_running = False
        
        # –§–ª–∞–≥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        self.is_initialized = False
        
        # –§–ª–∞–≥ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Telegram API
        self.is_available = False
        
        # –°–µ–º–∞—Ñ–æ—Ä –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        self.semaphore = asyncio.Semaphore(10)  # –ú–∞–∫—Å–∏–º—É–º 10 –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    
    async def initialize(self) -> bool:
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Telegram API –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞ –∏ chat_id.
        
        Returns:
            True, –µ—Å–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ, –∏–Ω–∞—á–µ False
        """
        if self.is_initialized:
            return True
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API –∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞
            async with aiohttp.ClientSession() as session:
                async with session.get(urljoin(self.api_url, "getMe")) as response:
                    if response.status == 200:
                        data = await response.json()
                        if data.get("ok"):
                            self.logger.info(f"–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram Bot API. –ë–æ—Ç: {data['result']['first_name']}")
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å chat_id, –æ—Ç–ø—Ä–∞–≤–ª—è—è —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                            chat_test_result = await self._send_chat_message(
                                f"ü§ñ Crypto Arbitrage Bot –∑–∞–ø—É—â–µ–Ω. –í–µ—Ä—Å–∏—è: {settings.VERSION}"
                            )
                            
                            if chat_test_result[0]:
                                self.is_initialized = True
                                self.is_available = True
                                
                                # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—á–µ—Ä–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
                                if not self.is_queue_processor_running:
                                    asyncio.create_task(self._process_message_queue())
                                    self.is_queue_processor_running = True
                                
                                self.logger.info("Telegram-–Ω–æ—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                                return True
                            else:
                                self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {chat_test_result[1]}")
                                return False
                        else:
                            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞: {data.get('description')}")
                            return False
                    else:
                        self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram API. –ö–æ–¥: {response.status}")
                        return False
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram-–Ω–æ—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞: {str(e)}")
            return False
    
    async def _send_chat_message(self, text: str, parse_mode: str = "HTML") -> Tuple[bool, str]:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç —á–µ—Ä–µ–∑ Telegram API.
        
        Args:
            text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            parse_mode: –†–µ–∂–∏–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ (HTML, Markdown)
            
        Returns:
            –ö–æ—Ä—Ç–µ–∂ (—É—Å–ø–µ—Ö, —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ)
        """
        try:
            async with self.semaphore:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏ –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π
                current_time = time.time()
                if current_time - self.last_reset_time >= 1.0:
                    self.message_count = 0
                    self.last_reset_time = current_time
                
                if self.message_count >= self.max_messages_per_second:
                    # –ï—Å–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç, –∂–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–π —Å–µ–∫—É–Ω–¥—ã
                    await asyncio.sleep(1.0 - (current_time - self.last_reset_time))
                    self.message_count = 0
                    self.last_reset_time = time.time()
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º JSON –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
                params = {
                    "chat_id": self.chat_id,
                    "text": text,
                    "parse_mode": parse_mode,
                    "disable_web_page_preview": True
                }
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
                async with aiohttp.ClientSession() as session:
                    async with session.post(urljoin(self.api_url, "sendMessage"), json=params) as response:
                        self.message_count += 1
                        
                        if response.status == 200:
                            data = await response.json()
                            if data.get("ok"):
                                return True, ""
                            else:
                                return False, data.get("description", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                        else:
                            error_text = await response.text()
                            return False, f"HTTP –æ—à–∏–±–∫–∞ {response.status}: {error_text}"
        except Exception as e:
            return False, str(e)
    
    async def _process_message_queue(self) -> None:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—á–µ—Ä–µ–¥—å —Å–æ–æ–±—â–µ–Ω–∏–π, —Å–æ–±–ª—é–¥–∞—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è API.
        –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω–∞—è –∑–∞–¥–∞—á–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏.
        """
        self.logger.info("–ó–∞–ø—É—â–µ–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—á–µ—Ä–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–π Telegram")
        
        while True:
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –æ—á–µ—Ä–µ–¥–∏
                message = await self.message_queue.get()
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                result, error = await self._send_chat_message(message)
                
                if not result:
                    self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {error}")
                
                # –°–æ–æ–±—â–∞–µ–º –æ—á–µ—Ä–µ–¥–∏, —á—Ç–æ –∑–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞
                self.message_queue.task_done()
                
                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏
                await asyncio.sleep(0.05)
            except asyncio.CancelledError:
                self.logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—á–µ—Ä–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–π Telegram –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                break
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –æ—á–µ—Ä–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {str(e)}")
                await asyncio.sleep(1)  # –ü–∞—É–∑–∞ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    
    async def _add_to_queue(self, message: str) -> None:
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å –æ—Ç–ø—Ä–∞–≤–∫–∏.
        
        Args:
            message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        """
        await self.message_queue.put(message)
    
    @log_async_execution_time
    async def send_message(self, message: str) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ—Å—Ç–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
        
        Args:
            message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            
        Returns:
            True –≤ —Å–ª—É—á–∞–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏, –∏–Ω–∞—á–µ False
        """
        if not self.is_initialized:
            if not await self.initialize():
                return False
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –æ—á–µ—Ä–µ–¥—å
        await self._add_to_queue(message)
        return True
    
    @log_async_execution_time
    async def send_alert(self, title: str, message: str, level: str = "info") -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ-–æ–ø–æ–≤–µ—â–µ–Ω–∏–µ —Å —É—Ä–æ–≤–Ω–µ–º –≤–∞–∂–Ω–æ—Å—Ç–∏.
        
        Args:
            title: –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏—è
            message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            level: –£—Ä–æ–≤–µ–Ω—å –≤–∞–∂–Ω–æ—Å—Ç–∏ (info, warning, error, critical)
            
        Returns:
            True –≤ —Å–ª—É—á–∞–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏, –∏–Ω–∞—á–µ False
        """
        if not self.is_initialized:
            if not await self.initialize():
                return False
        
        # –ü–æ–ª—É—á–∞–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è —É—Ä–æ–≤–Ω—è
        emoji = EMOJI_MAP.get(level.lower(), EMOJI_MAP["info"])
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        formatted_message = f"{emoji} <b>{title}</b>\n\n{message}"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –æ—á–µ—Ä–µ–¥—å
        await self._add_to_queue(formatted_message)
        return True
    
    @log_async_execution_time
    async def send_trade_info(
        self, 
        exchange: str, 
        symbol: str, 
        operation: str, 
        amount: float, 
        price: float, 
        status: str,
        details: Optional[Dict[str, Any]] = None
    ) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ—Ä–≥–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.
        
        Args:
            exchange: –ù–∞–∑–≤–∞–Ω–∏–µ –±–∏—Ä–∂–∏
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
            operation: –¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏ (buy, sell)
            amount: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
            price: –¶–µ–Ω–∞
            status: –°—Ç–∞—Ç—É—Å –æ–ø–µ—Ä–∞—Ü–∏–∏ (executed, failed, pending)
            details: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            
        Returns:
            True –≤ —Å–ª—É—á–∞–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏, –∏–Ω–∞—á–µ False
        """
        if not self.is_initialized:
            if not await self.initialize():
                return False
        
        # –ü–æ–ª—É—á–∞–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏ —Å—Ç–∞—Ç—É—Å–∞
        op_emoji = EMOJI_MAP.get(operation.lower(), "")
        status_emoji = EMOJI_MAP.get(status.lower(), "")
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å
        total = amount * price
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        formatted_message = (
            f"{EMOJI_MAP['trade']} <b>–¢–æ—Ä–≥–æ–≤–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è</b> {status_emoji}\n\n"
            f"<b>–ë–∏—Ä–∂–∞:</b> {exchange.upper()}\n"
            f"<b>–ü–∞—Ä–∞:</b> {symbol}\n"
            f"<b>–û–ø–µ—Ä–∞—Ü–∏—è:</b> {op_emoji} {operation.upper()}\n"
            f"<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> {amount}\n"
            f"<b>–¶–µ–Ω–∞:</b> {price} USDT\n"
            f"<b>–í—Å–µ–≥–æ:</b> {total:.2f} USDT\n"
            f"<b>–°—Ç–∞—Ç—É—Å:</b> {status.upper()}"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        if details:
            formatted_message += "\n\n<b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:</b>"
            for key, value in details.items():
                formatted_message += f"\n‚Ä¢ <b>{key}:</b> {value}"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –æ—á–µ—Ä–µ–¥—å
        await self._add_to_queue(formatted_message)
        return True
    
    @log_async_execution_time
    async def send_arbitrage_opportunity(
        self,
        buy_exchange: str,
        sell_exchange: str,
        symbol: str,
        buy_price: float,
        sell_price: float,
        profit_percent: float,
        estimated_profit: float,
        details: Optional[Dict[str, Any]] = None
    ) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–æ–π –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏.
        
        Args:
            buy_exchange: –ë–∏—Ä–∂–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏
            sell_exchange: –ë–∏—Ä–∂–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
            buy_price: –¶–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏
            sell_price: –¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏
            profit_percent: –ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∏–±—ã–ª–∏
            estimated_profit: –û—Ü–µ–Ω–æ—á–Ω–∞—è –ø—Ä–∏–±—ã–ª—å –≤ USD
            details: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            
        Returns:
            True –≤ —Å–ª—É—á–∞–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏, –∏–Ω–∞—á–µ False
        """
        if not self.is_initialized:
            if not await self.initialize():
                return False
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        formatted_message = (
            f"{EMOJI_MAP['arbitrage']} <b>–ê—Ä–±–∏—Ç—Ä–∞–∂–Ω–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å</b>\n\n"
            f"<b>–ü–∞—Ä–∞:</b> {symbol}\n\n"
            f"<b>–ü–æ–∫—É–ø–∫–∞:</b> {buy_exchange.upper()} - {buy_price} USDT\n"
            f"<b>–ü—Ä–æ–¥–∞–∂–∞:</b> {sell_exchange.upper()} - {sell_price} USDT\n\n"
            f"<b>–†–∞–∑–Ω–∏—Ü–∞ —Ü–µ–Ω:</b> {sell_price - buy_price:.8f} USDT\n"
            f"<b>–ü—Ä–∏–±—ã–ª—å:</b> {profit_percent:.2f}%\n"
            f"<b>–û—Ü–µ–Ω–æ—á–Ω–∞—è –ø—Ä–∏–±—ã–ª—å:</b> {estimated_profit:.2f} USDT"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        if details:
            formatted_message += "\n\n<b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:</b>"
            for key, value in details.items():
                formatted_message += f"\n‚Ä¢ <b>{key}:</b> {value}"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –æ—á–µ—Ä–µ–¥—å
        await self._add_to_queue(formatted_message)
        return True
    
    @log_async_execution_time
    async def send_system_status(
        self,
        status: str,
        balances: Dict[str, Dict[str, float]],
        active_tasks: int,
        errors_count: int,
        details: Optional[Dict[str, Any]] = None
    ) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã.
        
        Args:
            status: –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã (running, error, stopped)
            balances: –°–ª–æ–≤–∞—Ä—å —Å –±–∞–ª–∞–Ω—Å–∞–º–∏ –ø–æ –±–∏—Ä–∂–∞–º
            active_tasks: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á
            errors_count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫
            details: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            
        Returns:
            True –≤ —Å–ª—É—á–∞–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏, –∏–Ω–∞—á–µ False
        """
        if not self.is_initialized:
            if not await self.initialize():
                return False
        
        # –ü–æ–ª—É—á–∞–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞
        status_emoji = EMOJI_MAP.get(status.lower(), "")
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        formatted_message = (
            f"{EMOJI_MAP['system']} <b>–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã</b>\n\n"
            f"<b>–°–æ—Å—Ç–æ—è–Ω–∏–µ:</b> {status_emoji} {status.upper()}\n"
            f"<b>–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏:</b> {active_tasks}\n"
            f"<b>–û—à–∏–±–∫–∏:</b> {errors_count}\n\n"
            f"<b>–ë–∞–ª–∞–Ω—Å—ã:</b>"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–ª–∞–Ω—Å–∞—Ö
        for exchange, assets in balances.items():
            formatted_message += f"\n\n<b>{exchange.upper()}</b>:"
            for asset, amount in assets.items():
                formatted_message += f"\n‚Ä¢ {asset}: {amount}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        if details:
            formatted_message += "\n\n<b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:</b>"
            for key, value in details.items():
                formatted_message += f"\n‚Ä¢ <b>{key}:</b> {value}"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –æ—á–µ—Ä–µ–¥—å
        await self._add_to_queue(formatted_message)
        return True
    
    async def close(self) -> None:
        """
        –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏ –æ—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç —Ä–µ—Å—É—Ä—Å—ã.
        """
        # –ñ–¥–µ–º, –ø–æ–∫–∞ –æ—á–µ—Ä–µ–¥—å —Å–æ–æ–±—â–µ–Ω–∏–π –æ–ø—É—Å—Ç–µ–µ—Ç
        if self.is_initialized and self.is_queue_processor_running:
            self.logger.info("–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π Telegram...")
            await self.message_queue.join()
            self.is_queue_processor_running = False
            self.logger.info("Telegram-–Ω–æ—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É")
